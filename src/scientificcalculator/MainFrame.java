/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package scientificcalculator;

import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Toolkit;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author PC
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    int currentPosition = -1, currentChar, oldPos;
    DecimalFormat format = new DecimalFormat("0.#");

    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        historyScrollPane = new javax.swing.JScrollPane();
        historyTextArea = new javax.swing.JTextArea();
        resultField = new javax.swing.JTextField();
        zeroBtn = new javax.swing.JButton();
        commaBtn = new javax.swing.JButton();
        oneBtn = new javax.swing.JButton();
        twoBtn = new javax.swing.JButton();
        threeBtn = new javax.swing.JButton();
        fourBtn = new javax.swing.JButton();
        sixBtn = new javax.swing.JButton();
        fiveBtn = new javax.swing.JButton();
        sevenBtn = new javax.swing.JButton();
        eightBtn = new javax.swing.JButton();
        nineBtn = new javax.swing.JButton();
        divideBtn = new javax.swing.JButton();
        multiplicBtn = new javax.swing.JButton();
        subtractionBtn = new javax.swing.JButton();
        additionBtn = new javax.swing.JButton();
        equalBtn = new javax.swing.JButton();
        sqrtBtn = new javax.swing.JButton();
        powerBtn = new javax.swing.JButton();
        rightParenthesisBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        moduloBtn = new javax.swing.JButton();
        exponentialBtn = new javax.swing.JButton();
        piBtn = new javax.swing.JButton();
        tanBtn = new javax.swing.JButton();
        cosBtn = new javax.swing.JButton();
        sinBtn = new javax.swing.JButton();
        leftParenthesisBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        viemMenu = new javax.swing.JMenu();
        historyItem = new javax.swing.JCheckBoxMenuItem();
        EditMenu = new javax.swing.JMenu();
        copyItem = new javax.swing.JMenuItem();
        pasteItem = new javax.swing.JMenuItem();
        separator = new javax.swing.JPopupMenu.Separator();
        copyHistoryItem = new javax.swing.JMenuItem();
        clearHistoryItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        keyboardShortcutsItem = new javax.swing.JMenuItem();
        aboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        historyTextArea.setEditable(false);
        historyTextArea.setColumns(20);
        historyTextArea.setRows(5);
        historyTextArea.setAutoscrolls(false);
        historyScrollPane.setViewportView(historyTextArea);

        resultField.setFocusable(false);
        resultField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultFieldActionPerformed(evt);
            }
        });

        zeroBtn.setText("0");
        zeroBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroBtnActionPerformed(evt);
            }
        });

        commaBtn.setText(".");
        commaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commaBtnActionPerformed(evt);
            }
        });

        oneBtn.setText("1");
        oneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneBtnActionPerformed(evt);
            }
        });

        twoBtn.setText("2");
        twoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoBtnActionPerformed(evt);
            }
        });

        threeBtn.setText("3");
        threeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeBtnActionPerformed(evt);
            }
        });

        fourBtn.setText("4");
        fourBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourBtnActionPerformed(evt);
            }
        });

        sixBtn.setText("6");
        sixBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixBtnActionPerformed(evt);
            }
        });

        fiveBtn.setText("5");
        fiveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveBtnActionPerformed(evt);
            }
        });

        sevenBtn.setText("7");
        sevenBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenBtnActionPerformed(evt);
            }
        });

        eightBtn.setText("8");
        eightBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightBtnActionPerformed(evt);
            }
        });

        nineBtn.setText("9");
        nineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineBtnActionPerformed(evt);
            }
        });

        divideBtn.setText("÷");
        divideBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideBtnActionPerformed(evt);
            }
        });

        multiplicBtn.setText("×");
        multiplicBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplicBtnActionPerformed(evt);
            }
        });

        subtractionBtn.setText("-");
        subtractionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtractionBtnActionPerformed(evt);
            }
        });

        additionBtn.setText("+");
        additionBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                additionBtnActionPerformed(evt);
            }
        });

        equalBtn.setText("=");
        equalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalBtnActionPerformed(evt);
            }
        });

        sqrtBtn.setText("√");
        sqrtBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sqrtBtnActionPerformed(evt);
            }
        });

        powerBtn.setText("^");
        powerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powerBtnActionPerformed(evt);
            }
        });

        rightParenthesisBtn.setText(")");
        rightParenthesisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightParenthesisBtnActionPerformed(evt);
            }
        });

        backBtn.setText("←");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        moduloBtn.setText("%");
        moduloBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moduloBtnActionPerformed(evt);
            }
        });

        exponentialBtn.setText("e");
        exponentialBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exponentialBtnActionPerformed(evt);
            }
        });

        piBtn.setText("π");
        piBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                piBtnActionPerformed(evt);
            }
        });

        tanBtn.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        tanBtn.setText("tan");
        tanBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        tanBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tanBtnActionPerformed(evt);
            }
        });

        cosBtn.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        cosBtn.setText("cos");
        cosBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cosBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cosBtnActionPerformed(evt);
            }
        });

        sinBtn.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        sinBtn.setText("sin");
        sinBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sinBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sinBtnActionPerformed(evt);
            }
        });

        leftParenthesisBtn.setText("(");
        leftParenthesisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftParenthesisBtnActionPerformed(evt);
            }
        });

        clearBtn.setText("C");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        viemMenu.setText("View");

        historyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        historyItem.setText("History");
        historyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyItemActionPerformed(evt);
            }
        });
        viemMenu.add(historyItem);

        menuBar.add(viemMenu);

        EditMenu.setText("Edit");

        copyItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        copyItem.setText("Copy");
        copyItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyItemActionPerformed(evt);
            }
        });
        EditMenu.add(copyItem);

        pasteItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        pasteItem.setText("Paste");
        pasteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteItemActionPerformed(evt);
            }
        });
        EditMenu.add(pasteItem);
        EditMenu.add(separator);

        copyHistoryItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        copyHistoryItem.setText("Copy History");
        copyHistoryItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyHistoryItemActionPerformed(evt);
            }
        });
        EditMenu.add(copyHistoryItem);

        clearHistoryItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.SHIFT_DOWN_MASK));
        clearHistoryItem.setText("Clear History");
        clearHistoryItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearHistoryItemActionPerformed(evt);
            }
        });
        EditMenu.add(clearHistoryItem);

        menuBar.add(EditMenu);

        helpMenu.setText("Help");

        keyboardShortcutsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        keyboardShortcutsItem.setText("Keyboard Shortcuts");
        helpMenu.add(keyboardShortcutsItem);

        aboutItem.setText("About");
        helpMenu.add(aboutItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sevenBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(eightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(sinBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(piBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(exponentialBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cosBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(additionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(moduloBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(leftParenthesisBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(tanBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(powerBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rightParenthesisBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(zeroBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(commaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(fourBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fiveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(sixBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(oneBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(twoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(threeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(subtractionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sqrtBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(multiplicBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(divideBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(equalBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addComponent(resultField, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(historyScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(historyScrollPane)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(resultField, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tanBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cosBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(sinBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rightParenthesisBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(moduloBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(exponentialBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(piBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(leftParenthesisBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sevenBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(eightBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(additionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(powerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fourBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sixBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fiveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subtractionBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sqrtBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(oneBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(twoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(threeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(multiplicBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(commaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(divideBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(zeroBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(equalBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(276, 386));
        setLocationRelativeTo(null);
    }//GEN-END:initComponents

    private void historyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_historyItemActionPerformed
        if (((javax.swing.JCheckBoxMenuItem) evt.getSource()).isSelected()) {
            this.setSize(517, 386);
        } else {
            this.setSize(276, 386);
        }
    }//GEN-LAST:event_historyItemActionPerformed

    private void clearHistoryItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearHistoryItemActionPerformed
        historyTextArea.setText("");
    }//GEN-LAST:event_clearHistoryItemActionPerformed

    private void resultFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resultFieldActionPerformed

    private void zeroBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "number");
    }//GEN-LAST:event_zeroBtnActionPerformed

    private void commaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commaBtnActionPerformed
        if (resultField.getText().isEmpty()) {
            resultField.setText("0.");
        } else {
            setClickedButtonText((JButton) evt.getSource(), "point");
        }
    }//GEN-LAST:event_commaBtnActionPerformed

    private void oneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "number");
    }//GEN-LAST:event_oneBtnActionPerformed

    private void twoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "number");
    }//GEN-LAST:event_twoBtnActionPerformed

    private void threeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "number");
    }//GEN-LAST:event_threeBtnActionPerformed

    private void fourBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "number");
    }//GEN-LAST:event_fourBtnActionPerformed

    private void sixBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "number");
    }//GEN-LAST:event_sixBtnActionPerformed

    private void fiveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "number");
    }//GEN-LAST:event_fiveBtnActionPerformed

    private void sevenBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "number");
    }//GEN-LAST:event_sevenBtnActionPerformed

    private void eightBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "number");
    }//GEN-LAST:event_eightBtnActionPerformed

    private void nineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "number");
    }//GEN-LAST:event_nineBtnActionPerformed

    private void divideBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideBtnActionPerformed
        if (!resultField.getText().isEmpty()) {
            setClickedButtonText((JButton) evt.getSource(), "operand");
        }
    }//GEN-LAST:event_divideBtnActionPerformed

    private void multiplicBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplicBtnActionPerformed
        if (!resultField.getText().isEmpty()) {
            setClickedButtonText((JButton) evt.getSource(), "operand");
        }
    }//GEN-LAST:event_multiplicBtnActionPerformed

    private void subtractionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtractionBtnActionPerformed
        if (!resultField.getText().isEmpty()) {
            setClickedButtonText((JButton) evt.getSource(), "operand");
        }
    }//GEN-LAST:event_subtractionBtnActionPerformed

    private void additionBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_additionBtnActionPerformed
        if (!resultField.getText().isEmpty()) {
            setClickedButtonText((JButton) evt.getSource(), "operand");
        }
    }//GEN-LAST:event_additionBtnActionPerformed

    private void equalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalBtnActionPerformed
        if (!resultField.getText().isEmpty()) {
            String historyNewText = historyTextArea.getText() + resultField.getText() + "\n=";
            try {
                Double result = parseInput();
                if (result.isInfinite()) {
                    resultField.setText("cannot divide by 0");
                    historyNewText += "cannot divide by 0";
                } else {
                    resultField.setText(format.format(result));
                    historyNewText += format.format(result);
                }
            } catch (Exception e) {
                System.out.println(e.getMessage());
                resultField.setText("Error");
                historyNewText += "Error";
            }
            historyTextArea.setText(historyNewText + "\n\n");
            currentPosition = -1;
        }
    }//GEN-LAST:event_equalBtnActionPerformed

    private void sqrtBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sqrtBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "symbol");
    }//GEN-LAST:event_sqrtBtnActionPerformed

    private void powerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powerBtnActionPerformed
        if (resultField.getText().matches(".*[0-9eπ)]$")) {
            setClickedButtonText((JButton) evt.getSource(), "operand");
        }
    }//GEN-LAST:event_powerBtnActionPerformed

    private void rightParenthesisBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightParenthesisBtnActionPerformed
        if (resultField.getText().matches(".*[ns√(]")) {
            int leftParenthesisCounter = 0, rightParenthesisCounter = 0;
            for (char c : resultField.getText().toCharArray()) {
                if (c == '(') {
                    leftParenthesisCounter++;
                } else if (c == ')') {
                    rightParenthesisCounter++;
                }
            }
            if (leftParenthesisCounter > rightParenthesisCounter) {
                resultField.setText(resultField.getText() + ")");
            }

        }
    }//GEN-LAST:event_rightParenthesisBtnActionPerformed

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        if (!resultField.getText().isEmpty()) {
            if (resultField.getText().equals("Error") || resultField.getText().equals("cannot divide by 0")) {
                resultField.setText("");
            } else {
                String temp = resultField.getText().substring(0, resultField.getText().length() - 1);
                if (temp.length() >= 2) {
                    switch (temp.substring(temp.length() - 2)) {
                        case "si", "co", "ta" -> {
                            temp = temp.substring(0, temp.length() - 2);
                        }
                    }
                }
                resultField.setText(temp);
            }
        }
    }//GEN-LAST:event_backBtnActionPerformed

    private void moduloBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moduloBtnActionPerformed
        if (!resultField.getText().isEmpty()) {
            resultField.setText(resultField.getText() + "%");
        }
    }//GEN-LAST:event_moduloBtnActionPerformed

    private void exponentialBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exponentialBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "symbol");
    }//GEN-LAST:event_exponentialBtnActionPerformed

    private void piBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_piBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "symbol");
    }//GEN-LAST:event_piBtnActionPerformed

    private void tanBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tanBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "symbol");
    }//GEN-LAST:event_tanBtnActionPerformed

    private void cosBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cosBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "symbol");
    }//GEN-LAST:event_cosBtnActionPerformed

    private void sinBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sinBtnActionPerformed
        setClickedButtonText((JButton) evt.getSource(), "symbol");
    }//GEN-LAST:event_sinBtnActionPerformed

    private void leftParenthesisBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftParenthesisBtnActionPerformed
        resultField.setText(resultField.getText() + "(");
    }//GEN-LAST:event_leftParenthesisBtnActionPerformed

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        resultField.setText("");
        currentPosition = -1;
    }//GEN-LAST:event_clearBtnActionPerformed

    private void copyItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyItemActionPerformed
        resultField.selectAll();
        resultField.copy();
    }//GEN-LAST:event_copyItemActionPerformed

    private void pasteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteItemActionPerformed
        resultField.paste();

    }//GEN-LAST:event_pasteItemActionPerformed

    private void copyHistoryItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyHistoryItemActionPerformed
       historyTextArea.copy();
    }//GEN-LAST:event_copyHistoryItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.setLookAndFeel(new FlatLightLaf());
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    public void autoAddorRemove(String button) {
        if (!resultField.getText().isEmpty()) {
            char lastChar = resultField.getText().charAt(resultField.getText().length() - 1);
            switch (button) {
                case "symbol" -> {
                    switch (lastChar) {
                        case 'e', 'π' -> {
                            resultField.setText(resultField.getText() + "×");
                        }
                        case '.' -> {
                            resultField.setText(resultField.getText() + "0×");
                        }
                    }
                }
                case "number" -> {
                    switch (lastChar) {
                        case 'e', 'π' -> {
                            resultField.setText(resultField.getText() + "×");
                        }
                        case '0' -> {
                            if (resultField.getText().equals("0") || resultField.getText().endsWith("+0")
                                    || resultField.getText().endsWith("-0") || resultField.getText().endsWith("^0") || resultField.getText().endsWith("%0")
                                    || resultField.getText().endsWith("×0") || resultField.getText().endsWith("÷0") || resultField.getText().endsWith("√0")
                                    || resultField.getText().endsWith("(0") || resultField.getText().endsWith("cos0") || resultField.getText().endsWith("sin0")
                                    || resultField.getText().endsWith("tan0")) {
                                resultField.setText(resultField.getText().substring(0, resultField.getText().length()
                                        - 1));
                            }
                        }
                    }
                }
                case "operand" -> {
                    switch (lastChar) {
                        case '+', '-', '×', '÷', '%', '.' -> {
                            resultField.setText(resultField.getText().substring(0, resultField.getText().length() - 1));
                        }
                    }
                }
                case "point" -> {
                    switch (lastChar) {
                        case '+', '-', '×', '÷', '%', '(', '√', 'π', 's', 'n', '^' -> {
                            resultField.setText(resultField.getText() + "0");
                        }
                        case ')' -> {
                            resultField.setText(resultField.getText() + "×0");
                        }
                        case '.' -> {
                            resultField.setText(resultField.getText().substring(0, resultField.getText().length() - 1));
                        }
                    }
                }
            }
        }
    }

    public void nextChar() {
        if (++currentPosition < resultField.getText().length()) {
            currentChar = resultField.getText().charAt(currentPosition);
        } else {
            currentChar = -1;
        }

    }

    public boolean removeChar(char c) {
        if (currentChar == c) {
            nextChar();
            return true;
        }
        return false;
    }

    public double parseInput() {
        nextChar();
        double result = calculateLowerPriorityOperand();
        return result;
    }

    public double calculateLowerPriorityOperand() {
//        calculate Higher first     
        double result = calculateHigherPriorityOperand();
        while (true) {
            if (removeChar('+')) {
                result += parseNumber();
            } else if (removeChar('-')) {
                result -= parseNumber();
            } else {
                return result;
            }
        }
    }

    public double calculateHigherPriorityOperand() {
        double result = parseNumber();
        while (true) {
            if (removeChar('×')) {
                result *= parseNumber();
            } else if (removeChar('÷')) {
                result /= parseNumber();
            } else if (removeChar('%')) {
                result %= parseNumber();
            } else {
                return result;
            }
        }
    }

    public double parseNumber() {
        double result = 0;
        oldPos = currentPosition;
//        when we have() start from begin     
        if (removeChar('(')) {
            result = calculateLowerPriorityOperand();
            removeChar(')');
        }
        if (removeChar('e')) {
            result = Math.E;
        } else if (removeChar('π')) {
            result = Math.PI;
        } else if ((currentChar >= '0' && currentChar <= '9') || currentChar == '.') {
            while ((currentChar >= '0' && currentChar <= '9') || currentChar == '.') {
                nextChar();
            }
            result = Double.parseDouble(resultField.getText().substring(oldPos, currentPosition));
        } else if ((currentChar >= 'a' && currentChar <= 'z') || currentChar == '√') {
            while ((currentChar >= 'a' && currentChar <= 'z') || currentChar == '√') {
                nextChar();
            }
            String func = resultField.getText().substring(oldPos, currentPosition);
            result = parseNumber();
            switch (func) {
                case "√" -> {
                    result = Math.sqrt(result);
                }
                case "sin" -> {
                    result = Math.sin(Math.toRadians(result));
                }
                case "cos" -> {
                    result = Math.cos(Math.toRadians(result));
                }
                case "tan" -> {
                    result = Math.tan(Math.toRadians(result));
                }
                default -> {
                    throw new RuntimeException("Unknown function: " + func);
                }
            }
        } else {
            throw new RuntimeException("Unexpected" + (char) currentChar);
        }
        if (removeChar('^')) {
            result = Math.pow(result, parseNumber());
        }
        return result;
    }

    public void setClickedButtonText(javax.swing.JButton button, String buttonType) {
        autoAddorRemove(buttonType);
        resultField.setText(resultField.getText() + button.getText());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenuItem aboutItem;
    private javax.swing.JButton additionBtn;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton clearBtn;
    private javax.swing.JMenuItem clearHistoryItem;
    private javax.swing.JButton commaBtn;
    private javax.swing.JMenuItem copyHistoryItem;
    private javax.swing.JMenuItem copyItem;
    private javax.swing.JButton cosBtn;
    private javax.swing.JButton divideBtn;
    private javax.swing.JButton eightBtn;
    private javax.swing.JButton equalBtn;
    private javax.swing.JButton exponentialBtn;
    private javax.swing.JButton fiveBtn;
    private javax.swing.JButton fourBtn;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JCheckBoxMenuItem historyItem;
    private javax.swing.JScrollPane historyScrollPane;
    private javax.swing.JTextArea historyTextArea;
    private javax.swing.JMenuItem keyboardShortcutsItem;
    private javax.swing.JButton leftParenthesisBtn;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JButton moduloBtn;
    private javax.swing.JButton multiplicBtn;
    private javax.swing.JButton nineBtn;
    private javax.swing.JButton oneBtn;
    private javax.swing.JMenuItem pasteItem;
    private javax.swing.JButton piBtn;
    private javax.swing.JButton powerBtn;
    private javax.swing.JTextField resultField;
    private javax.swing.JButton rightParenthesisBtn;
    private javax.swing.JPopupMenu.Separator separator;
    private javax.swing.JButton sevenBtn;
    private javax.swing.JButton sinBtn;
    private javax.swing.JButton sixBtn;
    private javax.swing.JButton sqrtBtn;
    private javax.swing.JButton subtractionBtn;
    private javax.swing.JButton tanBtn;
    private javax.swing.JButton threeBtn;
    private javax.swing.JButton twoBtn;
    private javax.swing.JMenu viemMenu;
    private javax.swing.JButton zeroBtn;
    // End of variables declaration//GEN-END:variables
}
